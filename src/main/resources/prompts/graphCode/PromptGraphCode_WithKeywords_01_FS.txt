Informationen:
- Ein GraphCode dient der Suche innerhalb eines Medienobjekts.
- In diesem Kontext ist das Medienobjekt eine Aufnahme einer Szene im Metaverse.
- Der GraphCode besteht aus einer quadratischen Bewertungsmatrix sowie einem Vokabular.
- Das Vokabular besteht aus den Begriffen der Anfrage. Es enthält die Objekte, Attribute oder Aktivitäten.
- Einträge der Bewertungsmatrix geben typkodiert die Beziehung zwischen zwei Begriffen an.
- In der Einheitsdiagonalen (Einträge (i,j) mit i=j) ist der Typ des jeweils verwendeten Begriffs definiert.
- Eintrag i des Vokabulars entspricht Zeile i sowie Spalte i der Bewertungsmatrix
- Die Anzahl der Einträge im Vokabular und der Bewertungsmatrix ist gleich. Gibt es 4 Einträge im Vokabular, dann hat die Bewertungsmatrix eine Größe von 4x4.
- Die vorgegebenen möglichen Typkodierungen sind folgende:
[ENCODING]

Aufgabe:
- Generiere aus der gegebenen Nutzeranfrage einen GraphCode, der den gestellten Regeln folgt.
- Orientiere dich an den Beispielen unten, um ein umfangreiches Verständnis der erwarteten Antwort zu erhalten.

Eingabe:
- Folgende Anfrage wurde von dem Nutzer gestellt. Aus dieser soll der GraphCode generiert werden: [QUERY]
- Die Identifikation des Nutzers ist: [USER]
- Das zu verwendende englischsprachige Vokabular ist: [KEYWORDS]

Ausgabe:
- Das Ausgabeformat muss JSON sein.
- Im Erfolgsfall ist die Antwort von folgendem Format. Dabei entspricht "dictionary" dem Vokabular und "matrix" der Bewertungsmatrix:
{
    "dictionary":String[],
    "matrix":int[][],
    "description":String
}
- Im Fehlerfall ist die Antwort von folgendem Format:
{
    "error":String,
    "description":String
}

Regeln:
- Wenn der Nutzer angibt, dass er etwas tut oder etwas mit seiner Person zu tun hat, taucht im Vokabular des GraphCodes die in der Eingabe spezifizierte Identifikation des Nutzers auf.
- Neben den spezifizierten Ausgabeformaten für Erfolg und Fehler soll kein zusätzlicher Text generiert werden.
- Optional können Beschreibungen des GraphCodes im zugehörigen Feld "description" hinzugefügt werden.
- Einträge in der Bewertungsmatrix dürfen auf der Einheitsdiagonalen (Einträge (i,j) mit i=j) nur die Werte beinhalten, bei denen identityMapping==true ist.
- Einträge in der Bewertungsmatrix dürfen außerhalb der Einheitsdiagonalen (Einträge (i,j) mit i!=j) nur 0 oder Werte beinhalten, bei denen identityMapping==false ist.
- Alle Werte auf der Einheitsdiagonalen (Einträge (i,j) mit i=j) müssen gefüllt sein.
- Gibt es innerhalb der vorgegebenen Typkodierungen keinen passenden Eintrag, um die Relation zwischen zwei Einträgen darzustellen, dann soll ein entsprechender Fehler ausgegeben werden.
- Die Einträge des gegebenen Vokabulars müssen so beibehalten und übernommen werden.
- Die Einträge der Felder "description" oder "error" sollen in der gleichen Sprache, wie die Anfrage des Nutzers sein.
- Teile der Anfrage, wie "Ich suche" oder "Zeig mir Situationen", welche der Anfragenbeschreibung dienen und keine Szenenbeschreibung einer Metaverse-Situation sind, werden im GraphCode nicht berücksichtigt.
- Bei unklaren oder grammatikalisch wirren Anfragen sowie fehlenden Informationen für einen sinnvollen GraphCode soll kein GraphCode generiert werden, sondern ein beschreibender Fehler in das JSON geschrieben werden.
- Die Typkodierungen der Beispiele sind komplett den Beispielen vorenthalten. Es kann sein, dass sich die IDs der Beispiele von den Tatsächlichen unterscheiden. Verwende für den GraphCode nur die oben unter "Informationen" angegebenen Typkodierungen.
- Auch möglich ist, dass benötigte Attribute in den Beispielen vorhanden sind, aber nicht in den tatsächlichen Typkodierungen. Auch dann ist sind die Bespiele nicht zu verwenden und ein Fehler über fehlende Typkodierungen auszugeben.


Beispiele:
- In folgenden Beispielen wird die Person mit Max Mustermann identifiziert.
- Die Typkodierungen bestehen aus folgenden Einträgen:
[{"id":1,"attribute":"object","identityMapping":true},{"id":2,"attribute":"synonym","identityMapping":true},{"id":3,"attribute":"context","identityMapping":true},{"id":4,"attribute":"attached","identityMapping":false},{"id":5,"attribute":"above","identityMapping":false},{"id":6,"attribute":"in","identityMapping":false},{"id":7,"attribute":"perform","identityMapping":false},{"id":8,"attribute":"target","identityMapping":false},{"id":9,"attribute":"activity","identityMapping":true},{"id":10,"attribute":"son","identityMapping":false},{"id":11,"attribute":"characteristic","identityMapping":false}]

* Beispiel1:
Anfrage: Ich suche eine Szene, wo ich Tennis spiele
Vokabular: ["Max Mustermann", "play", "tennis"]
Antwort:
{
    "dictionary":["Max Mustermann", "play", "tennis"],
    "matrix":[[1,7,0],[0,9,8],[0,0,1]]
}

* Beispiel2:
Anfrage: Mein Sohn sitzt im Schlafzimmer auf dem Bett
Vokabular: ["Max Mustermann", "person", "sit", "bed", "bedroom"]
Antwort:
{
    "dictionary":["Max Mustermann", "person", "sit", "bed", "bedroom"],
    "matrix":[[1,10,0,0,0],[0,1,7,0,0],[0,0,9,5,6],[0,0,0,1,6],[0,0,0,0,1]]
}

* Beispiel3:
Anfrage: Ich bin unter einem Baum
Vokabular: ["Max Mustermann", "tree"]
Antwort:
{
    "error":"Die Relation \"Unter\" ist nicht bekannt."
}

* Beispiel4:
Anfrage: "Tom trägt ein rotes Shirt und redet mit Lea"
Vokabular: ["Tom", "wear", "shirt", "red", "talk", "Lea"]
Antwort:
{
    "dictionary":["Tom", "wear", "shirt", "red", "talk", "Lea"],
    "matrix":[[1,7,0,0,7,4],[0,9,8,0,0,0],[0,0,1,0,0,0],[0,0,11,3,0,0],[0,0,0,0,9,8],[4,0,0,0,0,1]]
}