{
  "state": "NON_PARSABLE_JSON",
  "matrixSimilarity": 0.0,
  "responsePlain": "Hier ist die GraphCodierung der Anfrage **\"Meine Tochter und ich fahren Boot auf einem See\"** als typcodierte Adjazenzmatrix in JSON-Format, wobei die Begriffe die Reihen/Spalten bilden und die Beziehungen untereinander die Typwerte sind.\n\n---\n\n### ✅ **Schritt 1: Identifiziere die Begriffe**\nDie Begriffe (Ecken) im Satz sind:\n1. **Meine Tochter**\n2. **ich**\n3. **Boot**\n4. **auf**\n5. **einem See**\n\n---\n\n### ✅ **Schritt 2: Kodiere die Beziehungen**\nWir verwenden die Typkodierung, um die Beziehungen zwischen den Begriffen zu erfassen:\n\n#### Typkodierung:\n1. `object` (z. B. Subjekt, Objekt)\n2. `context` (z. B. Ortsangabe, Umfeld)\n3. `synonym` (z. B. gleiche Bedeutung)\n4. `activity` (z. B. Handlung)\n5. `attached` (z. B. an etwas)\n6. `under` (z. B. unter etwas)\n7. `above` (z. B. über etwas)\n8. `perform` (z. B. jemand macht etwas)\n9. `target` (z. B. Ziel einer Aktion)\n10. `daughter` (z. B. Tochterbeziehung)\n11. `characteristic` (z. B. Eigenschaft)\n\n---\n\n### ✅ **Schritt 3: Aufbau der Adjazenzmatrix (Typwerte)**\nDie Beziehungen:\n- **Meine Tochter** ist die **Tochter** von **ich** → Typ **10**\n- **Meine Tochter** und **ich** **fahren** → Typ **perform** (Aktion)\n- **Boot** wird **gefahrene** → Typ **target**\n- **Boot** wird **auf** einem **See** befahren → Typ **attached** („auf“ bezieht sich auf „See“)\n- **See** ist der **Ort** → Typ **context**\n\n---\n\n### ✅ **JSON-Ausgabe**\n\n\n{\n  \"dictionary\": [\"Meine Tochter\", \"ich\", \"Boot\", \"auf\", \"einem See\"],\n  \"matrix\": [\n    [0, 10, 8, 0, 0],    // Meine Tochter\n    [0, 0, 8, 0, 5],     // ich\n    [0, 0, 0, 5, 9],     // Boot\n    [0, 0, 0, 0, 0],     // auf\n    [0, 0, 0, 0, 2]      // einem See\n  ]\n}\n\n\n---\n\n### 📝 **Erklärung der Matrix**\n\n- `matrix[0][1] \u003d 10`: \"Meine Tochter\" ist Tochter von \"ich\" (Typ `daughter`)\n- `matrix[0][2] \u003d 8`: \"Meine Tochter\" führt Aktion mit \"Boot\" durch (Typ `perform`)\n- `matrix[1][2] \u003d 8`: \"ich\" führt Aktion mit \"Boot\" durch (Typ `perform`)\n- `matrix[2][3] \u003d 5`: \"Boot\" wird \"auf\" (Typ `attached`)\n- `matrix[3][4] \u003d 0`: \"auf\" bezieht sich nicht direkt auf \"einem See\" (Typ `context` ist auf „einem See“)\n- `matrix[4][4] \u003d 2`: \"einem See\" ist ein Ortskontext (Typ `context`)\n\nFalls du eine **dynamische Codierung** mit `characteristic` oder `synonym` erwartest, teile gern weitere Beziehungen oder Kontexte mit – ich passe den Code an."
}