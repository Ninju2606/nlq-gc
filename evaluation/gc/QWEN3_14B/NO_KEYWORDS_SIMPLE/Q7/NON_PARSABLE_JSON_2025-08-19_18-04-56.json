{
  "state": "NON_PARSABLE_JSON",
  "matrixSimilarity": 0.0,
  "responsePlain": "Um die Anfrage **„Häuser um Fragen zu malen“** in eine typcodierte Adjazenzmatrix (GraphCode nach Wagenpfeil) umzubauen, gehen wir folgendermaßen vor:\n\n---\n\n### ✅ **Schritt 1: Die Begriffe im Text extrahieren und nummerieren (dictionary)**  \nIm Satz **„Häuser um Fragen zu malen“** finden wir folgende Begriffe:  \n- **Häuser**  \n- **um**  \n- **Fragen**  \n- **zu**  \n- **malen**\n\nDiese Begriffe bilden die **Spalten/Zeilen** der Adjazenzmatrix.\n\n\u003e **dictionary** \u003d [\"Häuser\", \"um\", \"Fragen\", \"zu\", \"malen\"]\n\n---\n\n### ✅ **Schritt 2: Typkodierung der Beziehungen**  \nWir analysieren die Beziehungen **zwischen den Begriffen** mit den vordefinierten Typkodierungen:\n\n#### **Zuordnung der Typkodierungen:**\n1. **object** \u003d Hauptobjekt der Aussage\n2. **context** \u003d Kontextbeziehung\n3. **synonym** \u003d Synonymbeziehung  \n4. **activity** \u003d Aktivität/Aktion\n5. **attached** \u003d Anschlussbeziehung\n6. **under** \u003d Unterordnung\n7. **above** \u003d Überordnung\n8. **perform** \u003d Ausführung von Aktivität\n9. **target** \u003d Ziel/Objekt einer Aktivität\n10. **daughter** \u003d untergeordnetes Konzept\n11. **characteristic** \u003d Eigenschaft / Attribut\n\n---\n\n### ✅ **Schritt 3: Bestimmung der Beziehungen**  \n**„Häuser um Fragen zu malen“** kann wie folgt interpretiert werden:  \n\n- **Häuser (object)** → **malen (activity)**, denn „malen“ ist die Aktivität, die auf „Häuser“ ausgerichtet ist.\n- **malen (activity)** → **Fragen (target)**, denn „Fragen“ ist das Zielobjekt der Aktivität („um Fragen zu malen“)\n- **um (context)** → **Fragen (target)**, da „um“ den Kontext für das Ziel „Fragen“ bildet.\n- **zu (attached)** → **malen (activity)**, da „zu“ das Präposition für die Aktivität „malen“ ist.\n\n\u003e **Beziehungen (typcodiert):**\n- **Häuser (0)** → **malen (4)** → **activity** ⇒ Typ \u003d 4\n- **malen (4)** → **Fragen (2)** → **target** ⇒ Typ \u003d 9\n- **um (1)** → **Fragen (2)** → **context** ⇒ Typ \u003d 2\n- **zu (3)** → **malen (4)** → **attached** ⇒ Typ \u003d 5\n\n---\n\n### ✅ **Schritt 4: Adjazenzmatrix aufbauen**  \nNun erstellen wir eine 5x5-Matrix, wobei die Zeilen/Spalten auf die Begriffe gemäß der Reihenfolge im dictionary abgebildet sind:\n\n|          | Häuser (0) | um (1) | Fragen (2) | zu (3) | malen (4) |\n|----------|------------|--------|------------|--------|-----------|\n| **Häuser (0)** | 0          | 0      | 0          | 0      | **4**     |\n| **um (1)**      | 0          | 0      | **2**      | 0      | 0         |\n| **Fragen (2)**  | 0          | 0      | 0          | 0      | **9**     |\n| **zu (3)**      | 0          | 0      | 0          | 0      | **5**     |\n| **malen (4)**   | 0          | 0      | 0          | 0      | 0         |\n\n---\n\n### ✅ **Schritt 5: JSON-Format ausgeben**\n\n\n{\n  \"dictionary\": [\"Häuser\", \"um\", \"Fragen\", \"zu\", \"malen\"],\n  \"matrix\": [\n    [0, 0, 0, 0, 4],\n    [0, 0, 2, 0, 0],\n    [0, 0, 0, 0, 9],\n    [0, 0, 0, 0, 5],\n    [0, 0, 0, 0, 0]\n  ]\n}\n\n\n---\n\n### ✅ **Erklärung der Matrixwerte:**\n\n- `(0, 4) \u003d 4` → **Häuser -\u003e malen** mit Typ **activity**\n- `(1, 2) \u003d 2` → **um -\u003e Fragen** mit Typ **context**\n- `(2, 4) \u003d 9` → **Fragen -\u003e malen** mit Typ **target**\n- `(3, 4) \u003d 5` → **zu -\u003e malen** mit Typ **attached**\n\nFalls du das Format erweitern möchtest (z. B. mit Relationen oder Richtung), lass es mich wissen!"
}