{
  "state": "NON_PARSABLE_JSON",
  "matrixSimilarity": 0.0,
  "responsePlain": "Um die Anfrage **\"Wir müssen bald einen Termin ausmachen.\"** in einen **GraphCode nach Wagenpfeil** umzuwandeln, folgen wir der Logik, bei der:\n\n- **Begriffe** in der Anfrage als **Reihen/Spalten** einer Adjazenzmatrix dienen.\n- **Beziehungen** zwischen den Begriffen werden durch **Typkodierungen** (vorgegebene IDs) dargestellt.\n- Die Ausgabe erfolgt als **JSON-Objekt** mit einem `dictionary` (Begriffe) und einer `matrix` (Typwerte).\n\n## 1. Schritt: Begriffe extrahieren\nDie Begriffe in der Anfrage sind:\n- **Wir**  \n- **müssen**  \n- **bald**  \n- **einen**  \n- **Termin**  \n- **ausmachen**\n\n## 2. Schritt: Beziehungen zwischen den Begriffen bestimmen\nWir analysieren, welche Beziehungen zwischen den Begriffen bestehen und weisen den entsprechenden Typen zu:\n\n- **Wir müssen** → **müssen** (Typ: **object** – id: 1)  \n- **Wir** → **müssen** (Typ: **perform** – id: 8)  \n- **müssen** → **einen Termin ausmachen** (Typ: **target** – id: 9)  \n- **einen Termin** → **Termin** (Typ: **object** – id: 1)  \n- **Termin ausmachen** → **ausmachen** (Typ: **object** – id: 1)  \n- **Termin ausmachen** → **Termin** (Typ: **attached** – id: 5)  \n- **bald** → **Termin** (Typ: **characteristic** – id: 14)\n\n## 3. Schritt: Adjazenzmatrix erstellen\n\nDie Reihenfolge der Begriffe ist:\n1. **Wir**  \n2. **müssen**  \n3. **bald**  \n4. **einen**  \n5. **Termin**  \n6. **ausmachen**\n\nDie Typkodierungen sind:\n- 1: **object**  \n- 2: **context**  \n- 3: **synonym**  \n- 4: **activity**  \n- 5: **attached**  \n- 6: **under**  \n- 7: **above**  \n- 8: **perform**  \n- 9: **target**  \n- 10: **daughter**  \n- 14: **characteristic**\n\n### Matrix (beispielhaft)\nJede Zelle `matrix[i][j]` bezeichnet den Typ zwischen dem i-ten und j-ten Begriff:\n\n\n{\n  \"dictionary\": [\"Wir\", \"müssen\", \"bald\", \"einen\", \"Termin\", \"ausmachen\"],\n  \"matrix\": [\n    [0, 8, 0, 0, 0, 0],     // Wir → muss (perform)\n    [1, 0, 0, 0, 9, 0],     // muss → Termin (target)\n    [0, 0, 0, 0, 14, 0],    // bald → Termin (characteristic)\n    [0, 0, 0, 0, 0, 0],     // einen → (kein direkter Bezug)\n    [1, 0, 0, 0, 0, 5],     // Termin → ausmachen (attached)\n    [1, 0, 0, 0, 0, 0]      // ausmachen → (object)\n  ]\n}\n\n\n## Erklärung:\n- Die Werte `0` bedeuten **keine Beziehung**.\n- Typ `8` (**perform**) ist bei **Wir → müssen**.\n- Typ `9` (**target**) ist bei **müssen → Termin ausmachen**.\n- Typ `14` (**characteristic**) ist bei **bald → Termin**.\n- Typ `5` (**attached**) ist bei **Termin → ausmachen**.\n- Typ `1` (**object**) wird dort verwendet, wo ein Begriff als eigenständiges Objekt betrachtet wird (z. B. **müssen**, **Termin**, **ausmachen**).\n\n---\n\nDas finale JSON-Objekt (im Wagenpfeil-Format) ist:\n\n\n{\n  \"dictionary\": [\"Wir\", \"müssen\", \"bald\", \"einen\", \"Termin\", \"ausmachen\"],\n  \"matrix\": [\n    [0, 8, 0, 0, 0, 0],\n    [1, 0, 0, 0, 9, 0],\n    [0, 0, 0, 0, 14, 0],\n    [0, 0, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0, 5],\n    [1, 0, 0, 0, 0, 0]\n  ]\n}"
}